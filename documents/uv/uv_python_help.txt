Manage Python versions and installations

Generally, uv first searches for Python in a virtual environment, either active or in a
`.venv` directory in the current working directory or any parent directory. If a virtual
environment is not required, uv will then search for a Python interpreter. Python
interpreters are found by searching for Python executables in the `PATH` environment
variable.

On Windows, the registry is also searched for Python executables.

By default, uv will download Python if a version cannot be found. This behavior can be
disabled with the `--no-python-downloads` flag or the `python-downloads` setting.

The `--python` option allows requesting a different interpreter.

The following Python version request formats are supported:

- `<version>` e.g. `3`, `3.12`, `3.12.3`
- `<version-specifier>` e.g. `>=3.12,<3.13`
- `<implementation>` e.g. `cpython` or `cp`
- `<implementation>@<version>` e.g. `cpython@3.12`
- `<implementation><version>` e.g. `cpython3.12` or `cp312`
- `<implementation><version-specifier>` e.g. `cpython>=3.12,<3.13`
- `<implementation>-<version>-<os>-<arch>-<libc>` e.g. `cpython-3.12.3-macos-aarch64-none`

Additionally, a specific system Python interpreter can often be requested with:

- `<executable-path>` e.g. `/opt/homebrew/bin/python3`
- `<executable-name>` e.g. `mypython3`
- `<install-dir>` e.g. `/some/environment/`

When the `--python` option is used, normal discovery rules apply but discovered interpreters
are checked for compatibility with the request, e.g., if `pypy` is requested, uv will first
check if the virtual environment contains a PyPy interpreter then check if each executable
in the path is a PyPy interpreter.

uv supports discovering CPython, PyPy, and GraalPy interpreters. Unsupported interpreters
will be skipped during discovery. If an unsupported interpreter implementation is requested,
uv will exit with an error.

Usage: uv python [OPTIONS] <COMMAND>

Commands:
  list          List the available Python installations
  install       Download and install Python versions
  upgrade       Upgrade installed Python versions
  find          Search for a Python installation
  pin           Pin to a specific Python version
  dir           Show the uv Python installation directory
  uninstall     Uninstall Python versions
  update-shell  Ensure that the Python executable directory is on the `PATH`

Cache options:
  -n, --no-cache
          Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the
          operation
          
          [env: UV_NO_CACHE=]

      --cache-dir <CACHE_DIR>
          Path to the cache directory.
          
          Defaults to `$XDG_CACHE_HOME/uv` or `$HOME/.cache/uv` on macOS and Linux, and `%LOCALAPPDATA%\uv\cache` on
          Windows.
          
          To view the location of the cache directory, run `uv cache dir`.
          
          [env: UV_CACHE_DIR=]

Python options:
      --managed-python
          Require use of uv-managed Python versions.
          
          By default, uv prefers using Python versions it manages. However, it will use system Python versions if a
          uv-managed Python is not installed. This option disables use of system Python versions.
          
          [env: UV_MANAGED_PYTHON=]

      --no-managed-python
          Disable use of uv-managed Python versions.
          
          Instead, uv will search for a suitable Python version on the system.
          
          [env: UV_NO_MANAGED_PYTHON=]

      --no-python-downloads
          Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]

Global options:
  -q, --quiet...
          Use quiet output.
          
          Repeating this option, e.g., `-qq`, will enable a silent mode in which uv will write no output to stdout.

  -v, --verbose...
          Use verbose output.
          
          You can configure fine-grained logging using the `RUST_LOG` environment variable.
          (<https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives>)

      --color <COLOR_CHOICE>
          Control the use of color in output.
          
          By default, uv will automatically detect support for colors when writing to a terminal.

          Possible values:
          - auto:   Enables colored output only when the output is going to a terminal or TTY with support
          - always: Enables colored output regardless of the detected environment
          - never:  Disables colored output

      --native-tls
          Whether to load TLS certificates from the platform's native certificate store.
          
          By default, uv loads certificates from the bundled `webpki-roots` crate. The `webpki-roots` are a reliable set
          of trust roots from Mozilla, and including them in uv improves portability and performance (especially on
          macOS).
          
          However, in some cases, you may want to use the platform's native certificate store, especially if you're
          relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate
          store.
          
          [env: UV_NATIVE_TLS=]

      --offline
          Disable network access.
          
          When disabled, uv will only use locally cached data and locally available files.
          
          [env: UV_OFFLINE=]

      --allow-insecure-host <ALLOW_INSECURE_HOST>
          Allow insecure connections to a host.
          
          Can be provided multiple times.
          
          Expects to receive either a hostname (e.g., `localhost`), a host-port pair (e.g., `localhost:8080`), or a URL
          (e.g., `https://localhost`).
          
          WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use
          `--allow-insecure-host` in a secure network with verified sources, as it bypasses SSL verification and could
          expose you to MITM attacks.
          
          [env: UV_INSECURE_HOST=]

      --no-progress
          Hide all progress outputs.
          
          For example, spinners or progress bars.
          
          [env: UV_NO_PROGRESS=]

      --directory <DIRECTORY>
          Change to the given directory prior to running the command.
          
          Relative paths are resolved with the given directory as the base.
          
          See `--project` to only change the project root directory.

      --project <PROJECT>
          Run the command within the given project directory.
          
          All `pyproject.toml`, `uv.toml`, and `.python-version` files will be discovered by walking up the directory
          tree from the project root, as will the project's virtual environment (`.venv`).
          
          Other command-line arguments (such as relative paths) will be resolved relative to the current working
          directory.
          
          See `--directory` to change the working directory entirely.
          
          This setting has no effect when used in the `uv pip` interface.
          
          [env: UV_PROJECT=]

      --config-file <CONFIG_FILE>
          The path to a `uv.toml` file to use for configuration.
          
          While uv configuration can be included in a `pyproject.toml` file, it is not allowed in this context.
          
          [env: UV_CONFIG_FILE=]

      --no-config
          Avoid discovering configuration files (`pyproject.toml`, `uv.toml`).
          
          Normally, configuration files are discovered in the current directory, parent directories, or user
          configuration directories.
          
          [env: UV_NO_CONFIG=]

  -h, --help
          Display the concise help for this command

Use `uv help python <command>` for more information on a specific command.

